/* Copyright (c) 2012 HyeonJe Jun (http://github.com/noraesae)
 * Licensed under the MIT License
 */
((function ($) {

    // The default settings for the plugin
    var defaultSettings = {
        wheelSpeed: 10,
        wheelPropagation: false
    };

    $.fn.gScrollbar = function (suppliedSettings, option) {

        return this.each(function() {
            // Use the default settings
            var settings = $.extend(true, {}, defaultSettings);
            if (typeof suppliedSettings === "object") {
                // But over-ride any supplied
                $.extend(true, settings, suppliedSettings);
            } else {
                // If no settings were supplied, then the first param must be the option
                option = suppliedSettings;
            }

            if (option === 'update') {
                //console.log('g-scroll update');
                if ($(this).data('g-scrollbar-update')) {
                    $(this).data('g-scrollbar-update')();
                }
                return $(this);
            }
            else if (option === 'destroy') {
                //console.log('g-scroll destroy');
                if ($(this).data('g-scrollbar-destroy')) {
                    $(this).data('g-scrollbar-destroy')();
                }
                return $(this);
            }

            if ($(this).data('g-scrollbar')) {
                // if there's already g-scrollbar
                return $(this).data('g-scrollbar');
            }

            var $this = $(this).addClass('ps-container'),
                $content = $(this).children(),
                $scrollbarX = $("<div class='ps-scrollbar-x'></div>").appendTo($this),
                $scrollbarY = $("<div class='ps-scrollbar-y'></div>").css('top', '0').appendTo($this),
                containerWidth,
                containerHeight,
                contentWidth,
                contentHeight,
                scrollbarXWidth,
                scrollbarXLeft,
                scrollbarXBottom = parseInt($scrollbarX.css('bottom'), 10),
                scrollbarYHeight,
                scrollbarYTop,
                scrollbarYRight = parseInt($scrollbarY.css('right'), 10);
            var updateContentScrollTop = function () {
                //console.log('1');
                var scrollTop = parseInt(scrollbarYTop * contentHeight / containerHeight, 10);
                $this.scrollTop(scrollTop);
                $scrollbarX.css({bottom: scrollbarXBottom - scrollTop});
            };

            var updateContentScrollLeft = function () {
                //console.log('2');
                var scrollLeft = parseInt(scrollbarXLeft * contentWidth / containerWidth, 10);
                $this.scrollLeft(scrollLeft);
                $scrollbarY.css({right: scrollbarYRight - scrollLeft});
            };

            /**
            * проверка для того чтобы при малом количестве элементов скроллбар убирался
            *
            * modified by: thymajesty / 10-11-2014
            **/

            var updateBarSizeAndPosition = function () {
                //console.log('3');
                /*console.log($this);*/
                containerWidth = $this.width();
                containerHeight = $this.height();
                var _avatarElementId = $this.context.id;
/*              console.log(_avatarElementId);
                console.log('Высота контейнера - ' + containerHeight);*/
                contentWidth = $content.outerWidth(false);
                contentHeight = $content.outerHeight(false);
                if (containerWidth < contentWidth) {
                    //console.log('4');
                    scrollbarXWidth = parseInt(containerWidth * containerWidth / contentWidth, 10);
                    scrollbarXLeft = parseInt($this.scrollLeft() * containerWidth / contentWidth, 10);
                }
                else {
                    //console.log('5');
                    scrollbarXWidth = 0;
                    scrollbarXLeft = 0;
                    $this.scrollLeft(0);
                }
                if (containerHeight < contentHeight) {
                    //console.log('6');
                    scrollbarYHeight = parseInt(containerHeight * containerHeight / contentHeight, 10);
                    scrollbarYTop = parseInt($this.scrollTop() * containerHeight / contentHeight, 10);
                }
                else {
                    /**
                     * TODO: Разобраться и переделать (либо попробовать внедрить jScrollPane)
                     * испольузется костыль, который проверяет id контейнера
                    **/
                    if(_avatarElementId == 'avatars-collection') {
                        //console.log('7.2');
                        scrollbarYHeight = 0;
                    }
                    //console.log('7');
                    if(containerHeight == 0 && !_avatarElementId){
                    //console.log('container height');
                    //console.log(containerHeight);
                    //console.log('7.5');
                        scrollbarYHeight = 54;
                    } else if(!_avatarElementId){
                        //console.log('8');
                        scrollbarYHeight = parseInt(containerHeight * containerHeight / contentHeight, 10);
                    }
                    scrollbarYTop = parseInt($this.scrollTop() * containerHeight / contentHeight, 10);
                    $this.scrollTop(0);
                }

                if (scrollbarYTop > containerHeight - scrollbarYHeight) {
                    //console.log('8');
                    scrollbarYTop = containerHeight - scrollbarYHeight;
                    scrollbarYHeight = 0;
                }
                if (scrollbarXLeft >= containerWidth - scrollbarXWidth) {
                    //console.log('9');
                    scrollbarXLeft = containerWidth - scrollbarXWidth;
                }


                if(scrollbarYHeight >= containerHeight-5)
                {
                    scrollbarYHeight = 0;
                }
                $scrollbarX.css({left: scrollbarXLeft + $this.scrollLeft(), bottom: scrollbarXBottom - $this.scrollTop(), width: scrollbarXWidth});
                $scrollbarY.css({top: scrollbarYTop + $this.scrollTop(), right: scrollbarYRight - $this.scrollLeft(), height: scrollbarYHeight});
            };

            var moveBarX = function (currentLeft, deltaX) {
                //console.log('10');
                var newLeft = currentLeft + deltaX,
                    maxLeft = containerWidth - scrollbarXWidth;

                if (newLeft < 0) {
                    scrollbarXLeft = 0;
                }
                else if (newLeft > maxLeft) {
                    scrollbarXLeft = maxLeft;
                }
                else {
                    scrollbarXLeft = newLeft;
                }
                $scrollbarX.css({left: scrollbarXLeft + $this.scrollLeft()});
            };

            var moveBarY = function (currentTop, deltaY) {
                //console.log('10');
                var newTop = currentTop + deltaY,
                    maxTop = containerHeight - scrollbarYHeight;

                if (newTop < 0) {
                    scrollbarYTop = 0;
                }
                else if (newTop > maxTop) {
                    scrollbarYTop = maxTop;
                }
                else {
                    scrollbarYTop = newTop;
                }
                $scrollbarY.css({top: scrollbarYTop + $this.scrollTop()});
                //console.log('contentHeight ', contentHeight);
            };

            var bindMouseScrollYHandler = function () {
                var currentTop,
                    currentPageY;

                $scrollbarY.bind('mousedown.g-scroll', function (e) {
                    //console.log('18');
                    updateBarSizeAndPosition();
                    currentPageY = e.pageY;
                    currentTop = $scrollbarY.position().top;
                    $scrollbarY.addClass('in-scrolling');
                    e.stopPropagation();
                    e.preventDefault();
                });

                $(document).bind('mousemove.g-scroll', function (e) {
                    //console.log('19');
                    if ($scrollbarY.hasClass('in-scrolling')) {
                        //console.log('20');
                        //updateBarSizeAndPosition();
                        updateContentScrollTop();
                        moveBarY(currentTop, e.pageY - currentPageY);
                        e.stopPropagation();
                        e.preventDefault();
                    }
                });

                $(document).bind('mouseup.g-scroll', function (e) {
                    //console.log('20.5');
                    updateBarSizeAndPosition();
                    if ($scrollbarY.hasClass('in-scrolling')) {
                        updateBarSizeAndPosition();
                        $scrollbarY.removeClass('in-scrolling');
                    }
                });
            };

            var bindMouseScrollXHandler = function () {
                //console.log('12');
                var currentLeft,
                    currentPageX;

                $scrollbarX.bind('mousedown.g-scroll', function (e) {
                    //console.log('13');
                    currentPageX = e.pageX;
                    currentLeft = $scrollbarX.position().left;
                    $scrollbarX.addClass('in-scrolling');
                    e.stopPropagation();
                    e.preventDefault();
                });

                $(document).bind('mousemove.g-scroll', function (e) {
                    //console.log('14');
                    if ($scrollbarX.hasClass('in-scrolling')) {
                       //console.log('15');
                        //updateBarSizeAndPosition();
                        updateContentScrollLeft();
                        moveBarX(currentLeft, e.pageX - currentPageX);
                        e.stopPropagation();
                        e.preventDefault();
                    }
                });

                $(document).bind('mouseup.g-scroll', function (e) {
/*                    if() {
                        updateBarSizeAndPosition();
                        $scrollbarY.css({top: 0, right: scrollbarYRight - $this.scrollLeft(), height: scrollbarYHeight});
                    }*/
                    //console.log('16');
                    $scrollbarY.css({top: 0, right: scrollbarYRight - $this.scrollLeft(), height: scrollbarYHeight});
                    updateBarSizeAndPosition();
                    if ($scrollbarX.hasClass('in-scrolling')) {
                        //console.log('17');
                        updateBarSizeAndPosition();
                        $scrollbarX.removeClass('in-scrolling');
                    }
                });
            };


            // bind handlers
            var bindMouseWheelHandler = function () {
                //console.log('21');
                var shouldPreventDefault = function (deltaX, deltaY) {
                    //console.log('22');
                    var scrollTop = $this.scrollTop();
                    if (scrollTop === 0 && deltaY > 0 && deltaX === 0) {
                        //console.log('23');
                        return !settings.wheelPropagation;
                    }
                    else if (scrollTop > contentHeight - containerHeight && deltaY < 0 && deltaX === 0) {
                    //console.log('24');
                        return !settings.wheelPropagation;
                    }

                    var scrollLeft = $this.scrollLeft();
                    if (scrollLeft === 0 && deltaX < 0 && deltaY === 0) {
                        //console.log('25');
                        return !settings.wheelPropagation;
                    }
                    else if (scrollLeft >= contentWidth - containerWidth && deltaX > 0 && deltaY === 0) {
                        //console.log('26');
                        return !settings.wheelPropagation;
                    }
                    return true;
                };

                $this.bind('mousewheel.g-scroll', function (e, delta, deltaX, deltaY) {

                    $this.scrollTop($this.scrollTop() - (deltaY * settings.wheelSpeed));
                    $this.scrollLeft($this.scrollLeft() + (deltaX * settings.wheelSpeed));

                    // update bar position
                    updateBarSizeAndPosition();
/*                    $('#click_btn').on('click', function() {
                        $this.scrollTop('0px');
                        $scrollbarY('top', '0px');
                        $scrollbarX('bottom', '3px');
                    });*/
                    if (shouldPreventDefault(deltaX, deltaY)) {
                        //console.log('29');
                        e.preventDefault();
                    }
                });
            };

            var bindMobileTouchHandler = function () {
                //console.log('30');
                var applyTouchMove = function (differenceX, differenceY) {
                    //console.log('31');
                    $this.scrollTop($this.scrollTop() - differenceY);
                    $this.scrollLeft($this.scrollLeft() - differenceX);

                    // update bar position
                    updateBarSizeAndPosition();
                };

                var startCoords = {},
                    startTime = 0,
                    speed = {},
                    breakingProcess = null;

                $this.bind("touchstart.g-scroll", function (e) {
                    //console.log('32');
                    var touch = e.originalEvent.targetTouches[0];

                    startCoords.pageX = touch.pageX;
                    startCoords.pageY = touch.pageY;

                    startTime = (new Date()).getTime();

                    if (breakingProcess !== null) {
                        clearInterval(breakingProcess);
                    }
                });
                $this.bind("touchmove.g-scroll", function (e) {
                    //console.log('33');
                    var touch = e.originalEvent.targetTouches[0];

                    var currentCoords = {};
                    currentCoords.pageX = touch.pageX;
                    currentCoords.pageY = touch.pageY;

                    var differenceX = currentCoords.pageX - startCoords.pageX,
                        differenceY = currentCoords.pageY - startCoords.pageY;

                    applyTouchMove(differenceX, differenceY);
                    startCoords = currentCoords;

                    var currentTime = (new Date()).getTime();
                    speed.x = differenceX / (currentTime - startTime);
                    speed.y = differenceY / (currentTime - startTime);
                    startTime = currentTime;

                    e.preventDefault();
                });
                $this.bind("touchend.g-scroll", function (e) {
                    //console.log('34');
                    breakingProcess = setInterval(function () {
                        if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
                            //console.log('35');
                            clearInterval(breakingProcess);
                            return;
                        }

                        applyTouchMove(speed.x * 30, speed.y * 30);

                        speed.x *= 0.8;
                        speed.y *= 0.8;
                    }, 10);
                });
            };

            var destroy = function () {
                //console.log('36');
                $scrollbarX.remove();
                $scrollbarY.remove();
                $this.unbind('.g-scroll');
                $(window).unbind('.g-scroll');
                $this.data('g-scrollbar', null);
                $this.data('g-scrollbar-update', null);
                $this.data('g-scrollbar-destroy', null);
            };
            var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent);

            var initialize = function () {
                //console.log('37');
                updateBarSizeAndPosition();
                bindMouseScrollXHandler();
                bindMouseScrollYHandler();
                if (isMobile) {
                    bindMobileTouchHandler();
                }
                if ($this.mousewheel) {
                    bindMouseWheelHandler();
                }
                $this.data('g-scrollbar', $this);
                $this.data('g-scrollbar-update', updateBarSizeAndPosition);
                $this.data('g-scrollbar-destroy', destroy);
            };

            // initialize
            initialize();
/*            $('#click_btn').on('click', function() {
                //console.log('38');
                $this.scrollTop('0px');
                $scrollbarY.css('top', '0px');
                $scrollbarX.css('bottom', '3px');
            });*/

            return $this;

        });
    };
})(jQuery));
